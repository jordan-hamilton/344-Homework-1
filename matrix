#!/bin/bash

getDims() {
  dimsFile="dimsTemp.$$"
  if [ "$#" -eq "0" ]
  then
    cat > "$dimsFile"
  else
    checkParameters 1 "$@"

    if [ ! -r "$1" ]
    then
      echo "The file specified does not exist." >&2
      exit 4
    else
      cat "$1" > "$dimsFile"
    fi

  fi

  rowCount=$(wc -l < "$dimsFile")
  colCount=$(head -1 < "$dimsFile" | tr '\t' '\n' | wc -l)
  echo "$rowCount" "$colCount"
  rm -f "$dimsFile" #DEBUG
}

transposeMatrix() {
  transposeFile="transposeTemp.$$"
  cutFile="cutTemp.$$"
  if [ "$#" -eq "0" ]
  then
    cat > "$transposeFile"
  else
    checkParameters 1 "$@"

    if [ ! -r "$1" ]
    then
      echo "The file specified does not exist." >&2
      exit 4
    else
      cat "$1" > "$transposeFile"
    fi

  fi

  rowCount=$(getDims "$transposeFile" | cut -f1 -d" ")
  colCount=$(getDims "$transposeFile" | cut -f2 -d" ")
  colToWrite=1

  for ((colToRead = 1; colToRead <= colCount; colToRead++))
  do
    while read -r line
    do
      [ "$colToWrite" -ne "1" ] && printf "\t" >> "$cutFile"
      printf "$(echo "$line" | cut -d$'\t' -f$colToRead)" >> "$cutFile"
      ((colToWrite++))
    done < "$transposeFile"
    printf '\n' >> "$cutFile"
    # Reset the column we're writing to so we can tab before printing an integer
    # in all columns after the first column
    colToWrite=1
  done
  cat "$cutFile"
  rm -f "$transposeFile" #DEBUG
  rm -f "$cutFile" #DEBUG
}

getMean() {
  meanFile="meanTemp.$$"
  if [ "$#" -eq "0" ]
  then
    cat > "$meanFile"
  else
    checkParameters 1 "$@"
    if [ ! -r "$1" ]
    then
      echo "The file specified does not exist." >&2
      exit 4
    else
      cat "$1" > "$meanFile"
    fi
  fi

  rm -f "$meanFile" #DEBUG
}

addMatrix() {
  [ ! -r "$1" ] || [ ! -r "$2" ] && { echo "We couldn't detect one or both of the supplied matrices" >&2; exit 10; }
  [ "$(getDims "$1")" != "$(getDims "$2")" ] && { echo "We couldn't perform this operation on matrices of different dimensions." >&2; exit 11; }
  echo "Good to add!" #TODO
}

multiplyMatrix() {
  [ ! -r "$1" ] || [ ! -r "$2" ] && { echo "We couldn't detect one or both of the supplied matrices" >&2; exit 10; }
  [ "$(getDims "$1")" != "$(getDims "$2")" ] && { echo "We couldn't perform this operation on matrices of different dimensions." >&2; exit 11; }
  echo "Good to multiply!" #TODO
}

checkParameters() {
  [ "$#" -ne "$(($1 + 1))" ] && { echo "Invalid number of arguments for this operation" >&2; exit 3; }
}

getCommand() {
  [ "$#" -eq "0" ] && { echo "No arguments provided." >&2; exit 1; }
  case $1 in
    dims)
      getDims "${@:2}"
    ;;
    transpose)
      transposeMatrix "${@:2}"
    ;;
    mean)
      getMean "${@:2}"
    ;;
    add)
      checkParameters 2 "${@:2}"
      addMatrix "${@:2}"
    ;;
    multiply)
      checkParameters 2 "${@:2}"
      multiplyMatrix "${@:2}"
    ;;
    *)
      echo "Invalid argument" >&2; exit 2
    ;;
  esac
}

getCommand "$@"

exit 0
